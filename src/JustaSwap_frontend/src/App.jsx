import React, { useState, useEffect } from 'react';
import { AuthClient } from '@dfinity/auth-client';
import { Actor, HttpAgent } from '@dfinity/agent';
import Login from './components/Login';
import SwapInterface from './components/SwapInterface';

// Import the IDL factory (will be generated by dfx)
import { idlFactory } from 'declarations/Orderbook';
import { canisterId as orderbookCanisterId } from 'declarations/Orderbook';

function App() {
  const [authClient, setAuthClient] = useState(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [identity, setIdentity] = useState(null);
  const [principal, setPrincipal] = useState(null);
  const [orderbookActor, setOrderbookActor] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  // Initialize auth client on mount
  useEffect(() => {
    initAuth();
  }, []);

  const initAuth = async () => {
    try {
      const client = await AuthClient.create();
      setAuthClient(client);
      
      // Check if already authenticated
      if (await client.isAuthenticated()) {
        await handleAuthenticated(client);
      }
    } catch (error) {
      console.error('Auth initialization error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const login = async () => {
    if (!authClient) return;

    // Use testnet Internet Identity
    const identityProvider = "https://identity.ic0.app";

    await authClient.login({
      identityProvider,
      onSuccess: () => {
        handleAuthenticated(authClient);
      },
      onError: (error) => {
        console.error('Login error:', error);
      }
    });
  };

  const handleAuthenticated = async (client) => {
    const identity = client.getIdentity();
    const principal = identity.getPrincipal();
    
    setIsAuthenticated(true);
    setIdentity(identity);
    setPrincipal(principal);

    // Create actor for Orderbook canister
    const agent = new HttpAgent({ identity });
    
    // For local development
    if (process.env.DFX_NETWORK !== "ic") {
      agent.fetchRootKey().catch(console.error);
    }

    const actor = Actor.createActor(idlFactory, {
      agent,
      canisterId: orderbookCanisterId,
    });

    setOrderbookActor(actor);
  };

  const logout = async () => {
    if (authClient) {
      await authClient.logout();
      setIsAuthenticated(false);
      setIdentity(null);
      setPrincipal(null);
      setOrderbookActor(null);
    }
  };

  if (isLoading) {
    return (
      <div className="loading-container">
        <div className="loading-spinner"></div>
        <p>Loading JustaSwap...</p>
      </div>
    );
  }

  return (
    <main className="app">
      <header className="app-header">
        <div className="header-content">
          <div className="logo-section">
            <img src="/logo2.svg" alt="JustaSwap logo" className="logo" />
            <h1>JustaSwap</h1>
          </div>
          {isAuthenticated && (
            <div className="user-section">
              <span className="principal">
                {principal?.toString().slice(0, 10)}...
              </span>
              <button onClick={logout} className="logout-button">
                Logout
              </button>
            </div>
          )}
        </div>
      </header>

      <div className="app-content">
        {!isAuthenticated ? (
          <Login onLogin={login} />
        ) : (
          <SwapInterface 
            orderbookActor={orderbookActor} 
            principal={principal}
          />
        )}
      </div>

      <footer className="app-footer">
        <p>Built on Internet Computer | MEV-Resistant Trading</p>
      </footer>
    </main>
  );
}

export default App;
